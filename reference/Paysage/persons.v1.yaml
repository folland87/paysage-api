openapi: 3.1.0
info:
  title: Persons
  version: '1.0'
servers:
  - url: 'http://localhost:3000'
paths:
  /persons:
    get:
      summary: Get a person
      tags: []
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
      operationId: get-persons
      parameters:
        - $ref: ./commons.v1.yaml#/components/parameters/query
        - $ref: ./commons.v1.yaml#/components/parameters/skip
        - $ref: ./commons.v1.yaml#/components/parameters/limit
        - $ref: ./commons.v1.yaml#/components/parameters/project
    post:
      summary: Create a person
      operationId: post-persons
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
  '/person/{personID}':
    parameters:
      - schema:
          type: string
        name: personID
        in: path
        required: true
    get:
      summary: Get a person
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '401':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
      operationId: get-person-by-id
      description: Retrieve the information of the Person with the matching user ID.
    patch:
      summary: Update a person
      operationId: patch-users-userId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
      description: Update the information of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
    delete:
      summary: Delete a person
      operationId: delete-person-personID
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
  '/persons/{personID}/identifiers':
    parameters:
      - schema:
          type: string
        name: personID
        in: path
        required: true
    get:
      summary: Get a person's identifiers
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Identifiers'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: get-persons-personID-identifiers
    post:
      summary: Create a person's identifier
      operationId: post-persons-personID-identifiers
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Identifiers'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Identifiers'
  '/persons/{personID}/identifiers/{identifierID}':
    parameters:
      - schema:
          type: string
        name: personID
        in: path
        required: true
      - schema:
          type: string
        name: identifierID
        in: path
        required: true
    get:
      summary: Get a person's indifier
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Identifiers'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: get-persons-personID-identifiers-identifierID
    patch:
      summary: Update a person's identifier
      operationId: patch-persons-personID-identifiers-identifierID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Identifiers'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Identifiers'
    delete:
      summary: Delete a person's identifier
      operationId: delete-persons-personID-identifiers-identifierID
      responses:
        '204':
          description: No Content
  '/persons/{personID}/websites':
    parameters:
      - schema:
          type: string
        name: personID
        in: path
        required: true
    get:
      summary: Get a person's websites
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Websites'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: get-persons-personID-websites
    post:
      summary: Create a person's website
      operationId: post-persons-personID-websites
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Websites'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Websites'
  '/persons/{personID}/websites/{websiteID}':
    parameters:
      - schema:
          type: string
        name: personID
        in: path
        required: true
      - schema:
          type: string
        name: websiteID
        in: path
        required: true
    get:
      summary: Get a person's website
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Websites'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: get-persons-personID-websites-websiteID
    patch:
      summary: Update a person's website
      operationId: patch-persons-personID-websites-websiteID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Websites'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Websites'
    delete:
      summary: Delete a person's website
      operationId: delete-persons-personID-websites-websiteID
      responses:
        '204':
          description: No Content
  '/persons/{personID}/socials':
    parameters:
      - schema:
          type: string
        name: personID
        in: path
        required: true
    get:
      summary: Get a person's social networks
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SocialNetworks'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Create a person's website
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialNetworks'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialNetworks'
  '/persons/{personID}/socials/{socialID}':
    parameters:
      - schema:
          type: string
        name: personID
        in: path
        required: true
      - schema:
          type: string
        name: socialID
        in: path
        required: true
    get:
      summary: Get a person's social network
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialNetworks'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    patch:
      summary: Update a person's social network
      operationId: patch-persons-personID-socials-socialID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialNetworks'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialNetworks'
    delete:
      summary: Delete a person's social network
      responses:
        '204':
          description: No Content
  '/persons/{personID}/positions':
    parameters:
      - schema:
          type: string
        name: personID
        in: path
        required: true
    get:
      summary: Get a person's positions
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Positions'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Create a person's position
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Positions'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Positions'
  '/persons/{personID}/positions/{positionID}':
    parameters:
      - schema:
          type: string
        name: personID
        in: path
        required: true
      - schema:
          type: string
        name: socialID
        in: path
        required: true
    get:
      summary: Get a person's position
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Positions'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    patch:
      summary: Update a person's position
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Positions'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Positions'
    delete:
      summary: Delete a person's position
      responses:
        '204':
          description: No Content
  '/persons/{personID}/mesri-positions':
    parameters:
      - schema:
          type: string
        name: personID
        in: path
        required: true
    get:
      summary: Get a person's mesri positions
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MesriPositions'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Create a person's mesri position
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MesriPositions'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MesriPositions'
  '/persons/{personID}/mesri-positions/{mesriPositionID}':
    parameters:
      - schema:
          type: string
        name: personID
        in: path
        required: true
      - schema:
          type: string
        name: socialID
        in: path
        required: true
    get:
      summary: Get a person's mesri position
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MesriPositions'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    patch:
      summary: Update a person's mesri position
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MesriPositions'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MesriPositions'
    delete:
      summary: Delete a person's mesri position
      responses:
        '204':
          description: No Content
  '/persons/{personID}/prices':
    parameters:
      - schema:
          type: string
        name: personID
        in: path
        required: true
    get:
      summary: Get a person's prices
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Prices'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Create a person's price
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prices'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prices'
  '/persons/{personID}/prices/{priceID}':
    parameters:
      - schema:
          type: string
        name: personID
        in: path
        required: true
      - schema:
          type: string
        name: socialID
        in: path
        required: true
    get:
      summary: Get a person's price
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prices'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    patch:
      summary: Update a person's price
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prices'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prices'
    delete:
      summary: Delete a person's price
      responses:
        '204':
          description: No Content
components:
  schemas:
    Person:
      title: Person
      type: object
      properties:
        id:
          type: string
          readOnly: true
        firstName:
          type: string
        lastName:
          type: string
        alias:
          type: array
          items:
            type: string
        gender:
          type: string
          enum:
            - F
            - M
        email:
          type: string
        publicResearch:
          type: boolean
        birthDate:
          type: string
          format: date
        activities:
          type: string
        avatarUrl:
          type: string
        comment:
          type: string
        createdBy:
          type: string
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedBy:
          type: string
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
    Identifiers:
      title: Identifiers
      type: object
      properties:
        id:
          type: string
          readOnly: true
        type:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        identifier:
          type: string
        active:
          type: boolean
        updatedBy:
          type: string
          readOnly: true
        createdBy:
          type: string
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
    Websites:
      title: Web
      type: object
      properties:
        id:
          type: string
          readOnly: true
        type:
          type: string
        account:
          type: string
        createdAt:
          type: string
          format: date-time
          readOnly: true
        createdBy:
          type: string
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        updatedBy:
          type: string
          readOnly: true
    SocialNetworks:
      title: SocialNetworks
      type: object
      properties:
        id:
          type: string
          readOnly: true
        type:
          type: string
        url:
          type: string
        language:
          type: string
        createdAt:
          type: string
          format: date-time
          readOnly: true
        createdBy:
          type: string
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        updatedBy:
          type: string
          readOnly: true
      description: ''
    Positions:
      title: Positions
      type: object
      properties:
        id:
          type: string
          readOnly: true
        structureId:
          type: string
        personId:
          type: string
        positionId:
          type: string
        type:
          type: string
          enum:
            - mesri
            - nomination
            - mandat
        interim:
          type: string
        access:
          type: string
          enum:
            - election
            - nomination
        mandateCount:
          type: string
          enum:
            - '1'
            - '2'
            - 3+
        duration:
          type: string
        email:
          type: string
        textId:
          type: string
        strartDate:
          type: string
        endDate:
          type: string
        previsionalEndDate:
          type: string
        startDateApprox:
          type: boolean
        endDateApprox:
          type: boolean
        previsionalEndDateApprox:
          type: boolean
        createdBy:
          type: string
          readOnly: true
        createdAt:
          type: string
          format: date
          readOnly: true
        updatedBy:
          type: string
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
      required:
        - structureId
        - personId
        - positionId
        - type
    Prices:
      title: Prices
      type: object
      properties:
        id:
          type: string
          readOnly: true
        priceId:
          type: string
        personId:
          type: string
        structureId:
          type: string
        date:
          type: string
          format: date
        dateApprox:
          type: string
        createdBy:
          type: string
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedBy:
          type: string
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
      required:
        - priceId
        - personId
  responses:
    Error:
      description: Example response
      content:
        application/json:
          schema:
            $ref: ./models/Error.yaml
